/// <reference types="mocha" />
export declare type MochaWebpackOptions = {
    cwd: string;
    webpackConfig: {};
    bail: boolean;
    reporter: string | ReporterConstructor;
    reporterOptions: {};
    ui: string;
    fgrep?: string;
    grep?: string | RegExp;
    invert: boolean;
    ignoreLeaks: boolean;
    fullStackTrace: boolean;
    colors?: boolean;
    useInlineDiffs: boolean;
    timeout: number;
    retries?: number;
    slow: number;
    asyncOnly: boolean;
    delay: boolean;
    interactive: boolean;
    clearTerminal: boolean;
    quiet: boolean;
    growl?: boolean;
    forbidOnly: boolean;
};
export default class MochaWebpack {
    /**
     * Files to run test against
     *
     * @private
     */
    entries: Array<string>;
    /**
     * Files to include into the bundle
     *
     * @private
     */
    includes: Array<string>;
    /**
     * Options
     *
     * @private
     */
    options: MochaWebpackOptions;
    /**
     * Add file run test against
     *
     * @public
     * @param {string} file file or glob
     * @return {MochaWebpack}
     */
    addEntry(file: string): MochaWebpack;
    /**
     * Add file to include into the test bundle
     *
     * @public
     * @param {string} file absolute path to module
     * @return {MochaWebpack}
     */
    addInclude(file: string): MochaWebpack;
    /**
     * Sets the current working directory
     *
     * @public
     * @param {string} cwd absolute working directory path
     * @return {MochaWebpack}
     */
    cwd(cwd: string): MochaWebpack;
    /**
     * Sets the webpack config
     *
     * @public
     * @param {Object} config webpack config
     * @return {MochaWebpack}
     */
    webpackConfig(config?: {}): MochaWebpack;
    /**
     * Enable or disable bailing on the first failure.
     *
     * @public
     * @param {boolean} [bail]
     * @return {MochaWebpack}
     */
    bail(bail?: boolean): MochaWebpack;
    /**
     * Set reporter to `reporter`, defaults to "spec".
     *
     * @param {string|Function} reporter name or constructor
     * @param {Object} reporterOptions optional options
     * @return {MochaWebpack}
     */
    reporter(reporter: string | ReporterConstructor, reporterOptions: {}): MochaWebpack;
    /**
     * Set test UI, defaults to "bdd".
     *
     * @public
     * @param {string} ui bdd/tdd
     * @return {MochaWebpack}
     */
    ui(ui: string): MochaWebpack;
    /**
     * Only run tests containing <string>
     *
     * @public
     * @param {string} str
     * @return {MochaWebpack}
     */
    fgrep(str: string): MochaWebpack;
    /**
     * Only run tests matching <pattern>
     *
     * @public
     * @param {string|RegExp} pattern
     * @return {MochaWebpack}
     */
    grep(pattern: string | RegExp): MochaWebpack;
    /**
     * Invert `.grep()` matches.
     *
     * @public
     * @return {MochaWebpack}
     */
    invert(): MochaWebpack;
    /**
     * Ignore global leaks.
     *
     * @public
     * @param {boolean} ignore
     * @return {MochaWebpack}
     */
    ignoreLeaks(ignore: boolean): MochaWebpack;
    /**
     * Display long stack-trace on failing
     *
     * @public
     * @return {MochaWebpack}
     */
    fullStackTrace(): MochaWebpack;
    /**
     * Emit color output.
     *
     * @public
     * @param {boolean} colors
     * @return {MochaWebpack}
     */
    useColors(colors: boolean): MochaWebpack;
    /**
     * Quiet informational messages.
     *
     * @public
     * @return {MochaWebpack}
     */
    quiet(): MochaWebpack;
    /**
     * Use inline diffs rather than +/-.
     *
     * @public
     * @param {boolean} inlineDiffs
     * @return {MochaWebpack}
     */
    useInlineDiffs(inlineDiffs: boolean): MochaWebpack;
    /**
     * Set the timeout in milliseconds. Value of 0 disables timeouts
     *
     * @public
     * @param {number} timeout time in ms
     * @return {MochaWebpack}
     */
    timeout(timeout: number): MochaWebpack;
    /**
     * Set the number of times to retry failed tests.
     *
     * @public
     * @param {number} count retry times
     * @return {MochaWebpack}
     */
    retries(count: number): MochaWebpack;
    /**
     * Set slowness threshold in milliseconds.
     *
     * @public
     * @param {number} threshold time in ms
     * @return {MochaWebpack}
     */
    slow(threshold: number): MochaWebpack;
    /**
     * Makes all tests async (accepting a callback)
     *
     * @public
     * @return {MochaWebpack}
     */
    asyncOnly(): MochaWebpack;
    /**
     * Delay root suite execution.
     *
     * @public
     * @return {MochaWebpack}
     */
    delay(): MochaWebpack;
    /**
     * Force interactive mode (default enabled in terminal)
     *
     * @public
     * @param {boolean} interactive
     * @return {MochaWebpack}
     */
    interactive(interactive: boolean): MochaWebpack;
    /**
     * Clear terminal on startup
     *
     * @public
     * @param {boolean} clearTerminal
     * @return {MochaWebpack}
     */
    clearTerminal(clearTerminal: boolean): MochaWebpack;
    /**
     * Enable growl notification support
     *
     * @public
     * @param {boolean} growl
     * @return {MochaWebpack}
     */
    growl(): MochaWebpack;
    /**
     * Disallow .only in tests
     *
     * @public
     * @param {boolean} forbidOnly
     * @return {MochaWebpack}
     */
    forbidOnly(): MochaWebpack;
    /**
     * Run tests
     *
     * @public
     * @return {Promise<number>} a Promise that gets resolved with the number of failed tests or rejected with build error
     */
    run(): Promise<number>;
    /**
     * Run tests and rerun them on changes
     * @public
     */
    watch(): Promise<void>;
}
