"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var mocha_1 = __importDefault(require("mocha"));
var loadReporter_1 = __importDefault(require("./loadReporter"));
var loadUI_1 = __importDefault(require("./loadUI"));
function configureMocha(options) {
    // infinite stack traces
    Error.stackTraceLimit = Infinity;
    var mochaOptions = {
        color: !!options.colors,
        inlineDiffs: !!options.useInlineDiffs
    };
    // init mocha
    var mocha = new mocha_1["default"](mochaOptions);
    // reporter
    var reporter = loadReporter_1["default"](options.reporter, options.cwd);
    mocha.reporter(reporter, options.reporterOptions);
    // slow <ms>
    mocha.suite.slow(options.slow);
    // timeout <ms>
    if (options.timeout === 0) {
        mocha.enableTimeouts(false);
    }
    else {
        mocha.suite.timeout(options.timeout);
    }
    // bail
    mocha.suite.bail(options.bail);
    // grep
    if (options.grep) {
        mocha.grep(new RegExp(options.grep));
    }
    // fgrep
    if (options.fgrep) {
        mocha.grep(options.fgrep);
    }
    // invert
    if (options.invert) {
        mocha.invert();
    }
    // check-leaks
    if (options.ignoreLeaks === false) {
        mocha.checkLeaks();
    }
    // full-trace
    if (options.fullStackTrace) {
        mocha.fullTrace();
    }
    // growl
    if (options.growl) {
        mocha.growl();
    }
    // async-only
    if (options.asyncOnly) {
        mocha.asyncOnly();
    }
    // delay
    if (options.delay) {
        mocha.delay();
    }
    // retries
    if (options.retries) {
        mocha.suite.retries(options.retries);
    }
    // forbid-only
    if (options.forbidOnly) {
        mocha.forbidOnly();
    }
    // interface
    var ui = loadUI_1["default"](options.ui, options.cwd);
    mocha.ui(ui);
    return mocha;
}
exports["default"] = configureMocha;
//# sourceMappingURL=configureMocha.js.map