/// <reference types="node" />
import EventEmitter from 'events';
import { Configuration as WebpackConfig, Stats } from 'webpack';
import { EntryConfig } from '../webpack/loader/entryLoader';
import { MochaWebpackOptions } from '../MochaWebpack';
declare type MochaRunner = {
    abort: () => void;
    currentRunnable?: {
        retries: (count: number) => void;
        enableTimeouts: (enabled: boolean) => void;
        timeout: (ms: number) => void;
        resetTimeout: (ms: number) => void;
    };
};
declare type Mocha = {
    run: (cb: (failures: number) => void) => MochaRunner;
};
export default class TestRunner extends EventEmitter {
    entries: Array<string>;
    includes: Array<string>;
    options: MochaWebpackOptions;
    constructor(entries: Array<string>, includes: Array<string>, options: MochaWebpackOptions);
    prepareMocha(webpackConfig: WebpackConfig, stats: Stats): Mocha;
    run(): Promise<number>;
    watch(): Promise<void>;
    createWebpackConfig(): Promise<{
        webpackConfig: {
            entry: string;
            module: any;
            output: any;
            plugins: any[];
        };
        entryConfig: EntryConfig;
    }>;
}
export {};
