"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var yargs_1 = __importDefault(require("yargs"));
var lodash_1 = __importDefault(require("lodash"));
var BASIC_GROUP = 'Basic options:';
var OUTPUT_GROUP = 'Output options:';
var ADVANCED_GROUP = 'Advanced options:';
var options = {
    'async-only': {
        alias: 'A',
        type: 'boolean',
        "default": false,
        describe: 'force all tests to take a callback (async) or return a promise',
        group: ADVANCED_GROUP
    },
    colors: {
        alias: 'c',
        type: 'boolean',
        "default": undefined,
        describe: 'force enabling of colors',
        group: OUTPUT_GROUP
    },
    quiet: {
        alias: 'q',
        type: 'boolean',
        "default": undefined,
        describe: 'does not show informational messages',
        group: OUTPUT_GROUP
    },
    interactive: {
        type: 'boolean',
        "default": !!process.stdout.isTTY,
        describe: 'force interactive mode (default enabled in terminal)',
        group: OUTPUT_GROUP
    },
    'clear-terminal': {
        type: 'boolean',
        "default": false,
        describe: 'clear current terminal, purging its histroy',
        group: OUTPUT_GROUP
    },
    growl: {
        alias: 'G',
        type: 'boolean',
        "default": false,
        describe: 'enable growl notification support',
        group: OUTPUT_GROUP
    },
    recursive: {
        type: 'boolean',
        "default": false,
        describe: 'include sub directories',
        group: ADVANCED_GROUP
    },
    reporter: {
        alias: 'R',
        type: 'string',
        describe: 'specify the reporter to use',
        group: OUTPUT_GROUP,
        "default": 'spec',
        requiresArg: true
    },
    'reporter-options': {
        alias: 'O',
        type: 'string',
        describe: 'reporter-specific options, --reporter-options <k=v,k2=v2,...>',
        group: OUTPUT_GROUP,
        requiresArg: true
    },
    bail: {
        alias: 'b',
        type: 'boolean',
        describe: 'bail after first test failure',
        group: ADVANCED_GROUP,
        "default": false
    },
    glob: {
        type: 'string',
        describe: 'only test files matching <pattern> (only valid for directory entry)',
        group: ADVANCED_GROUP,
        requiresArg: true
    },
    grep: {
        alias: 'g',
        type: 'string',
        describe: 'only run tests matching <pattern>',
        group: ADVANCED_GROUP,
        requiresArg: true
    },
    fgrep: {
        alias: 'f',
        type: 'string',
        describe: 'only run tests containing <string>',
        group: ADVANCED_GROUP,
        requiresArg: true
    },
    invert: {
        alias: 'i',
        type: 'boolean',
        describe: 'inverts --grep and --fgrep matches',
        group: ADVANCED_GROUP,
        "default": false
    },
    require: {
        alias: 'r',
        type: 'string',
        describe: 'require the given module',
        group: ADVANCED_GROUP,
        requiresArg: true,
        multiple: true
    },
    include: {
        type: 'string',
        describe: 'include the given module into test bundle',
        group: ADVANCED_GROUP,
        requiresArg: true,
        multiple: true
    },
    slow: {
        alias: 's',
        describe: '"slow" test threshold in milliseconds',
        group: ADVANCED_GROUP,
        "default": 75,
        defaultDescription: '75 ms',
        requiresArg: true
    },
    timeout: {
        alias: 't',
        describe: 'set test-case timeout in milliseconds',
        group: ADVANCED_GROUP,
        "default": 2000,
        defaultDescription: '2000 ms',
        requiresArg: true
    },
    ui: {
        alias: 'u',
        describe: 'specify user-interface (e.g. "bdd", "tdd", "exports", "qunit")',
        group: BASIC_GROUP,
        "default": 'bdd',
        requiresArg: true
    },
    watch: {
        alias: 'w',
        type: 'boolean',
        describe: 'watch files for changes',
        group: BASIC_GROUP,
        "default": false
    },
    'check-leaks': {
        type: 'boolean',
        describe: 'check for global variable leaks',
        group: ADVANCED_GROUP,
        "default": false
    },
    'full-trace': {
        type: 'boolean',
        describe: 'display the full stack trace',
        group: ADVANCED_GROUP,
        "default": false
    },
    'inline-diffs': {
        type: 'boolean',
        describe: 'display actual/expected differences inline within each string',
        group: ADVANCED_GROUP,
        "default": false
    },
    exit: {
        type: 'boolean',
        describe: 'require a clean shutdown of the event loop: mocha will not call process.exit',
        group: ADVANCED_GROUP,
        "default": false
    },
    retries: {
        describe: 'set numbers of time to retry a failed test case',
        group: BASIC_GROUP,
        requiresArg: true
    },
    delay: {
        type: 'boolean',
        describe: 'wait for async suite definition',
        group: ADVANCED_GROUP,
        "default": false
    },
    mode: {
        type: 'string',
        choices: ['development', 'production'],
        describe: 'webpack mode to use',
        group: BASIC_GROUP,
        requiresArg: true
    },
    'webpack-config': {
        type: 'string',
        describe: 'path to webpack-config file',
        group: BASIC_GROUP,
        requiresArg: true,
        "default": 'webpack.config.js'
    },
    'webpack-env': {
        describe: 'environment passed to the webpack-config, when it is a function',
        group: BASIC_GROUP
    },
    opts: {
        type: 'string',
        describe: 'path to webpack-mocha options file',
        group: BASIC_GROUP,
        requiresArg: true
    },
    'forbid-only': {
        type: 'boolean',
        describe: 'fail if exclusive test(s) encountered',
        group: ADVANCED_GROUP,
        "default": false
    }
};
var paramList = function (opts) { return lodash_1["default"].map(lodash_1["default"].keys(opts), lodash_1["default"].camelCase); };
var parameters = paramList(options); // camel case parameters
// @ts-ignore
var parametersWithMultipleArgs = paramList(
// @ts-ignore
lodash_1["default"].pickBy(lodash_1["default"].mapValues(options, function (v) { return !!v.requiresArg && v.multiple === true; }))); // eslint-disable-line max-len
// @ts-ignore
var groupedAliases = lodash_1["default"].values(lodash_1["default"].mapValues(options, function (value, key) {
    // @ts-ignore
    return [lodash_1["default"].camelCase(key), key, value.alias].filter(lodash_1["default"].identity);
})); // eslint-disable-line max-len
function parse(argv, ignoreDefaults) {
    var parsedArgs = yargs_1["default"]
        .help('help')
        .alias('help', 'h')
        .version()
        // @ts-ignore
        .options(options)
        .strict()
        .parse(argv);
    var files = parsedArgs._;
    if (!files.length) {
        files = ['./test'];
    }
    var parsedOptions = lodash_1["default"].pick(parsedArgs, parameters); // pick all parameters as new object
    var validOptions = lodash_1["default"].omitBy(parsedOptions, lodash_1["default"].isUndefined); // remove all undefined values
    lodash_1["default"].forEach(parametersWithMultipleArgs, function (key) {
        if (lodash_1["default"].has(validOptions, key)) {
            var value = validOptions[key];
            if (!Array.isArray(value)) {
                validOptions[key] = [value];
            }
        }
    });
    lodash_1["default"].forOwn(validOptions, function (value, key) {
        // validate all non-array options with required arg that it is not duplicated
        // see https://github.com/yargs/yargs/issues/229
        if (parametersWithMultipleArgs.indexOf(key) === -1 && lodash_1["default"].isArray(value)) {
            var arg_1 = lodash_1["default"].kebabCase(key);
            var provided = value.map(function (v) { return "--" + arg_1 + " " + v; }).join(' ');
            var expected = "--" + arg_1 + " " + value[0];
            throw new Error("Duplicating arguments for \"--" + arg_1 + "\" is not allowed. \"" + provided + "\" was provided, but expected \"" + expected + "\""); // eslint-disable-line max-len
        }
    });
    validOptions.files = files;
    var reporterOptions = {};
    if (validOptions.reporterOptions) {
        validOptions.reporterOptions.split(',').forEach(function (opt) {
            var L = opt.split('=');
            if (L.length > 2 || L.length === 0) {
                throw new Error("invalid reporter option " + opt);
            }
            else if (L.length === 2) {
                reporterOptions[L[0]] = L[1]; // eslint-disable-line prefer-destructuring
            }
            else {
                reporterOptions[L[0]] = true;
            }
        });
    }
    validOptions.reporterOptions = reporterOptions;
    validOptions.require = validOptions.require || [];
    validOptions.include = validOptions.include || [];
    if (validOptions.webpackEnv) {
        lodash_1["default"].mapValues(validOptions.webpackEnv, function (value, key) {
            if (Array.isArray(value)) {
                var first = value[0];
                validOptions.webpackEnv[key] = first;
            }
        });
    }
    if (ignoreDefaults) {
        var userOptions = yargs_1["default"](argv).argv;
        var providedKeys_1 = lodash_1["default"].keys(userOptions);
        var usedAliases = lodash_1["default"].flatten(lodash_1["default"].filter(groupedAliases, function (aliases) {
            return lodash_1["default"].some(aliases, function (alias) { return providedKeys_1.indexOf(alias) !== -1; });
        }));
        if (parsedArgs._.length) {
            usedAliases.push('files');
        }
        return lodash_1["default"].pick(validOptions, usedAliases);
    }
    return validOptions;
}
function parseArgv(argv, ignoreDefaults) {
    if (ignoreDefaults === void 0) { ignoreDefaults = false; }
    var origMainFilename = require.main.filename;
    try {
        // yargs searches for package.json up starting from `require.main.filename` path with `yargs` parser configuration
        // it results in finding mocha `package.json` with config for yargs, which is different then we need
        require.main.filename = require.resolve('../../bin/_mocha');
        return parse(argv, ignoreDefaults);
    }
    finally {
        require.main.filename = origMainFilename;
    }
}
exports["default"] = parseArgv;
//# sourceMappingURL=parseArgv.js.map